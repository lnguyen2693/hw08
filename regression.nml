;; step 2
(check-principal-type 3 int)
(check-principal-type #t bool)
(check-principal-type 'hi sym)
(check-type-error abcdefg) 

;; step 4

(check-principal-type (if #t 2 4) int)  
(check-principal-type (if #t #t #f) bool)
(check-type-error (if #t 'a' 1))
(check-type-error (if 2 1 1))

(check-principal-type (begin #t) bool)
(check-principal-type (begin) unit)
(check-principal-type (begin 1) int)
(check-type-error (begin gvhbjko))


(check-principal-type ((lambda () 5)) int)
(check-principal-type (lambda (x) (* x 2))(int -> int))
(check-type-error (lambda (x) y)) 

;; step 5
(check-principal-type (let ((x 10)) 20) int)
(check-principal-type (let ((x 4) (y 6)) (* x y)) int)
(check-type-error (let ((x (if #t 1 #f))) x))

(check-principal-type (letrec () 2) int)
(check-principal-type (letrec ([g (lambda () 1)]) (g)) int) 
(check-principal-type (letrec ([g (lambda (a) a)]) (g 5)) int) 
(* (check-type-error (letrec ([g (lambda (a) a)]))) *)